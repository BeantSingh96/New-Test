CMImagePicker(requireActivity(), resultCallback).apply {
            allowCrop(true)
            allowCompress(true)
            allowGalleryOnly(false)
            allowCameraOnly(false)
            start()
        }



    private val resultCallback = object : ResultImage {
        override val result: ActivityResultLauncher<Intent> = registerForActivityResult(
            ActivityResultContracts.StartActivityForResult()
        ) { result: ActivityResult ->
            if (result.resultCode == Activity.RESULT_OK) {
                val imagePath = result.data?.getStringExtra(RESULT_IMAGE_PATH)
                val imageFile: File? = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                    result.data?.getSerializableExtra(
                        RESULT_IMAGE_FILE, File::class.java
                    )
                } else {
                    result.data?.getSerializableExtra(RESULT_IMAGE_FILE) as File
                }

                handleNewImageSelection(imagePath ?: "")

//                if (!imagePath.isNullOrEmpty()) {
//                    val profilePath = File(imagePath)
//
//                    if (items.size <= maxImagesAllowed) {
//                        items.add(selectedPosition, UploadImageModel(imagePath = imagePath))
//
//                        if (items.size == maxImagesAllowed){
//                            items.removeAt(selectedPosition+1)
//                        }
//
//                    } /*else {
//                        items.add(UploadImageModel(imagePath = imagePath))
//                    }*/
//                    uploadImageAdapter?.notifyDataSetChanged()
////                    val sizeInBytes = profilePath?.length();
////                    //transform in MB
////                    val sizeInMb = (sizeInBytes ?: 1) / (1024 * 1024)
////                    Log.e("TAG", " ${profilePath?.length()}: $sizeInMb")
//                } else {
////                    callImagePicker()
//                }
            }
        }
    }
